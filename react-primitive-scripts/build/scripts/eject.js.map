{"version":3,"sources":["eject.js"],"names":["filesUsingExpoSdk","filesWithExpo","usingExpo","length","expoSdkWarning","bold","filename","cyan","yellow","italic","reactNativeOptionMessage","questions","type","name","message","default","choices","value","prompt","ejectMethod","exists","resolve","useYarn","npmOrYarn","JSON","readFile","appJson","parse","pkgJson","newName","newDisplayName","displayName","expName","expo","stripDashes","validate","s","indexOf","enteredName","enteredDisplayname","writeFile","green","ejectCommand","ejectArgs","sync","stdio","status","red","process","exit","newDevDependencies","projectBabelPath","projectBabelRc","toString","babelRcJson","presets","includes","map","preset","push","main","dependencies","devDependencies","scripts","start","ios","android","eject","lolThatsSomeComplexCode","args","stdin","stderr","console","error","findJavaScriptProjectFilesInRoot","cwd","projectJsFiles","all","f","buf","i","contents","jsFileContents","filesUsingExpo","requires","findAll","sort","root","stat","stats","isFile","endsWith","isDirectory","readdir","children","join","jsFilesInChildren","concat","apply","ret","c","then","catch","e"],"mappings":"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","file":"eject.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport matchRequire from 'match-require';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawn from 'cross-spawn';\nimport log from '../util/log';\n\nimport { detach } from '../util/expo';\n\nasync function eject() {\n    try {\n        const filesWithExpo = await filesUsingExpoSdk();\n        const usingExpo = filesWithExpo.length > 0;\n\n        let expoSdkWarning;\n        if (usingExpo) {\n            expoSdkWarning = `${chalk.bold('Warning!')} We found at least one file where your project imports the Expo SDK:\n`;\n\n            for (let filename of filesWithExpo) {\n                expoSdkWarning += `  ${chalk.cyan(filename)}\\n`;\n            }\n\n            expoSdkWarning += `\n${chalk.yellow.bold('If you choose the \"plain\" React Native option below, these imports will stop working.')}`;\n        } else {\n            expoSdkWarning = `\\\nWe didn't find any uses of the Expo SDK in your project, so you should be fine to eject to\n\"Plain\" React Native. (This check isn't very sophisticated, though.)`;\n        }\n\n        log(\n            `\n${expoSdkWarning}\n\nWe ${chalk.italic('strongly')} recommend that you read this document before you proceed:\n  ${chalk.cyan('https://github.com/react-community/create-react-primitive-app/blob/master/EJECTING.md')}\n\nEjecting is permanent! Please be careful with your selection.\n`\n        );\n\n        let reactNativeOptionMessage = \"React Native: I'd like a regular React Native project.\";\n\n        if (usingExpo) {\n            reactNativeOptionMessage = chalk.italic(\n                \"(WARNING: See above message for why this option may break your project's build)\\n  \"\n            ) + reactNativeOptionMessage;\n        }\n\n        const questions = [\n            {\n                type: 'list',\n                name: 'ejectMethod',\n                message: 'How would you like to eject from create-react-primitive-app?',\n                default: usingExpo ? 'expoKit' : 'raw',\n                choices: [\n                    {\n                        name: reactNativeOptionMessage,\n                        value: 'raw'\n                    },\n                    {\n                        name: \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n                        value: 'expoKit'\n                    },\n                    {\n                        name: \"Cancel: I'll continue with my current project structure.\",\n                        value: 'cancel'\n                    }\n                ]\n            }\n        ];\n\n        const { ejectMethod } = await inquirer.prompt(questions);\n\n        if (ejectMethod === 'raw') {\n            const useYarn = await fse.exists(path.resolve('yarn.lock'));\n            const npmOrYarn = useYarn ? 'yarn' : 'npm';\n            const appJson = JSON.parse(\n                await fse.readFile(path.resolve('app.json'))\n            );\n            const pkgJson = JSON.parse(\n                await fse.readFile(path.resolve('package.json'))\n            );\n            let {\n                name: newName,\n                displayName: newDisplayName,\n                expo: { name: expName }\n            } = appJson;\n\n            // we ask user to provide a project name (default is package name stripped of dashes)\n            // but we want to infer some good default choices, especially if they've set them up in app.json\n            if (!newName) {\n                newName = stripDashes(pkgJson.name);\n            }\n\n            if (!newDisplayName && expName) {\n                newDisplayName = expName;\n            }\n\n            log(\n                \"We have a couple of questions to ask you about how you'd like to name your app:\"\n            );\n            const { enteredName, enteredDisplayname } = await inquirer.prompt([\n                {\n                    name: 'enteredDisplayname',\n                    message: \"What should your app appear as on a user's home screen?\",\n                    default: newDisplayName,\n                    validate: s => {\n                        return s.length > 0;\n                    }\n                },\n                {\n                    name: 'enteredName',\n                    message: 'What should your Android Studio and Xcode projects be called?',\n                    default: newName,\n                    validate: s => {\n                        return s.length > 0 &&\n                            s.indexOf('-') === -1 &&\n                            s.indexOf(' ') === -1;\n                    }\n                }\n            ]);\n\n            appJson.name = enteredName;\n            appJson.displayName = enteredDisplayname;\n\n            log('Writing your selections to app.json...');\n            // write the updated app.json file\n            await fse.writeFile(\n                path.resolve('app.json'),\n                JSON.stringify(appJson, null, 2)\n            );\n            log(\n                chalk.green(\n                    'Wrote to app.json, please update it manually in the future.'\n                )\n            );\n\n            const ejectCommand = 'node';\n            const ejectArgs = [\n                path.resolve(\n                    'node_modules',\n                    'react-native',\n                    'local-cli',\n                    'cli.js'\n                ),\n                'eject'\n            ];\n\n            const { status } = spawn.sync(ejectCommand, ejectArgs, {\n                stdio: 'inherit'\n            });\n\n            if (status !== 0) {\n                log(\n                    chalk.red(\n                        `Eject failed with exit code ${status}, see above output for any issues.`\n                    )\n                );\n                log(\n                    chalk.yellow(\n                        'You may want to delete the `ios` and/or `android` directories.'\n                    )\n                );\n                process.exit(1);\n            } else {\n                log('Successfully copied template native code.');\n            }\n\n            const newDevDependencies = [];\n            // Try to replace the Babel preset.\n            try {\n                const projectBabelPath = path.resolve('.babelrc');\n                // If .babelrc doesn't exist, the app is using the default config and\n                // editing the config is not necessary.\n                if (await fse.exists(projectBabelPath)) {\n                    const projectBabelRc = (await fse.readFile(\n                        projectBabelPath\n                    )).toString();\n\n                    // We assume the .babelrc is valid JSON. If we can't parse it (e.g. if\n                    // it's JSON5) the error is caught and a message asking to change it\n                    // manually gets printed.\n                    const babelRcJson = JSON.parse(projectBabelRc);\n                    if (\n                        babelRcJson.presets &&\n                        babelRcJson.presets.includes('babel-preset-expo')\n                    ) {\n                        babelRcJson.presets = babelRcJson.presets.map(\n                            preset =>\n                                preset === 'babel-preset-expo'\n                                    ? 'babel-preset-react-native-stage-0/decorator-support'\n                                    : preset\n                        );\n                        await fse.writeFile(\n                            projectBabelPath,\n                            JSON.stringify(babelRcJson, null, 2)\n                        );\n                        newDevDependencies.push(\n                            'babel-preset-react-native-stage-0'\n                        );\n                        log(\n                            chalk.green(\n                                `Babel preset changed to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n                            )\n                        );\n                    }\n                }\n            } catch (e) {\n                log(\n                    chalk.yellow(\n                        `We had an issue preparing your .babelrc for ejection.\nIf you have a .babelrc in your project, make sure to change the preset\nfrom \\`babel-preset-expo\\` to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n                    )\n                );\n                log(chalk.red(e));\n            }\n\n            delete pkgJson.main;\n\n            // NOTE: expo won't work after performing a raw eject, so we should delete this\n            // it will be a better error message for the module to not be found than for whatever problems\n            // missing native modules will cause\n            delete pkgJson.dependencies.expo;\n            delete pkgJson.devDependencies['react-primitive-scripts'];\n\n            pkgJson.scripts.start = 'react-native start';\n            pkgJson.scripts.ios = 'react-native run-ios';\n            pkgJson.scripts.android = 'react-native run-android';\n\n            // no longer relevant to an ejected project (maybe build is?)\n            delete pkgJson.scripts.eject;\n\n            log(`Updating your ${npmOrYarn} scripts in package.json...`);\n\n            await fse.writeFile(\n                path.resolve('package.json'),\n                JSON.stringify(pkgJson, null, 2)\n            );\n\n            log(chalk.green('Your package.json is up to date!'));\n\n            // FIXME now we need to provide platform-specific entry points until upstream uses a single one\n            log(`Adding platform-specific entry points...`);\n\n            const lolThatsSomeComplexCode = `import { AppRegistry } from 'react-native';\nimport App from './App';\nAppRegistry.registerComponent('${newName}', () => App);\n`;\n\n            await fse.writeFile(\n                path.resolve('index.ios.js'),\n                lolThatsSomeComplexCode\n            );\n            await fse.writeFile(\n                path.resolve('index.android.js'),\n                lolThatsSomeComplexCode\n            );\n\n            log(chalk.green('Added new entry points!'));\n\n            log(\n                `\nNote that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or\nAndroid Studio to build the native code for your project.`\n            );\n\n            log('Removing node_modules...');\n            rimraf.sync(path.resolve('node_modules'));\n            if (useYarn) {\n                log('Installing packages with yarn...');\n                const args = newDevDependencies.length > 0\n                    ? ['add', '--dev', ...newDevDependencies]\n                    : [];\n                spawn.sync('yarnpkg', args, { stdio: 'inherit' });\n            } else {\n                // npm prints the whole package tree to stdout unless we ignore it.\n                const stdio = [process.stdin, 'ignore', process.stderr];\n\n                log('Installing existing packages with npm...');\n                spawn.sync('npm', ['install'], { stdio });\n\n                if (newDevDependencies.length > 0) {\n                    log('Installing new packages with npm...');\n                    spawn.sync(\n                        'npm',\n                        ['install', '--save-dev', ...newDevDependencies],\n                        { stdio }\n                    );\n                }\n            }\n        } else if (ejectMethod === 'expoKit') {\n            await detach();\n        } else {\n            // we don't want to print the survey for cancellations\n            log('OK! If you change your mind you can run this command again.');\n            return;\n        }\n\n        log(\n            `${chalk.green('Ejected successfully!')}\nPlease consider letting us know why you ejected in this survey:\n  ${chalk.cyan('https://goo.gl/forms/iD6pl218r7fn9N0d2')}`\n        );\n    } catch (e) {\n        console.error(chalk.red(`Error running eject: ${e}`));\n    }\n}\n\nasync function filesUsingExpoSdk(): Promise<Array<string>> {\n    const projectJsFiles = await findJavaScriptProjectFilesInRoot(\n        process.cwd()\n    );\n\n    const jsFileContents = (await Promise.all(\n        projectJsFiles.map(f => fse.readFile(f))\n    )).map((buf, i) => {\n        return {\n            filename: projectJsFiles[i],\n            contents: buf.toString()\n        };\n    });\n\n    const filesUsingExpo = [];\n\n    for (let { filename, contents } of jsFileContents) {\n        const requires = matchRequire.findAll(contents);\n\n        if (requires.includes('expo')) {\n            filesUsingExpo.push(filename);\n        }\n    }\n\n    filesUsingExpo.sort();\n\n    return filesUsingExpo;\n}\n\nfunction stripDashes(s: string): string {\n    let ret = '';\n\n    for (let c of s) {\n        if (c !== ' ' && c !== '-') {\n            ret += c;\n        }\n    }\n\n    return ret;\n}\n\nasync function findJavaScriptProjectFilesInRoot(\n    root: string\n): Promise<Array<string>> {\n    // ignore node_modules\n    if (root.includes('node_modules')) {\n        return [];\n    }\n\n    const stats = await fse.stat(root);\n\n    if (stats.isFile()) {\n        if (root.endsWith('.js')) {\n            return [root];\n        } else {\n            return [];\n        }\n    } else if (stats.isDirectory()) {\n        const children = await fse.readdir(root);\n\n        // we want to do this concurrently in large project folders\n        const jsFilesInChildren = await Promise.all(\n            children.map(f =>\n                findJavaScriptProjectFilesInRoot(path.join(root, f)))\n        );\n\n        return [].concat.apply([], jsFilesInChildren);\n    } else {\n        // lol it's not a file or directory, we can't return a honey badger, 'cause it don't give a\n        return [];\n    }\n}\n\neject()\n    .then(() => {\n        // the expo local github auth server leaves a setTimeout for 5 minutes\n        // so we need to explicitly exit (for now, this will be resolved in the nearish future)\n        process.exit(0);\n    })\n    .catch(e => {\n        console.error(`Problem running eject: ${e}`);\n        process.exit(1);\n    });\n"]}