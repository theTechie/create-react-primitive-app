{"version":3,"sources":["start.js"],"names":["readPackagerInfoAsync","process","cwd","settings","constructManifestUrlAsync","address","generate","qrCode","underline","cyan","printUsage","printServerInfo","key","CTRL_C","CTRL_D","emit","withTimestamp","openProjectAsync","success","error","red","message","hostType","localAddress","openUrlInSimulatorSafeAsync","msg","reset","startAsync","dev","setAsync","bold","handleKeypress","validation","reactNativeVersionWarnings","developerTool","offline","args","argv","slice","boolean","default","interactive","options","isInteractive","stdin","setRawMode","resume","setEncoding","on","run","onReady","green","dim","devMode","iosInfo","platform"],"mappings":"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","file":"start.js","sourcesContent":["// @flow\n\nimport {\n    Android,\n    Config,\n    Project,\n    ProjectSettings,\n    Simulator,\n    UrlUtils\n} from 'xdl';\n\nimport chalk from 'chalk';\nimport indent from 'indent-string';\nimport qr from 'qrcode-terminal';\nimport minimist from 'minimist';\nimport log from '../util/log';\nimport clearConsole from '../util/clearConsole';\n\nimport packager from '../util/packager';\n\nConfig.validation.reactNativeVersionWarnings = false;\nConfig.developerTool = 'crna';\nConfig.offline = true;\n\nconst args = minimist(process.argv.slice(2), {\n    boolean: ['reset-cache', 'interactive'],\n    default: { interactive: true }\n});\nlet dev = true;\n\nconst options = {};\nif (args['reset-cache']) {\n    options.reset = true;\n    log('Asking packager to reset its cache...');\n}\n\nlet isInteractive = false;\nconst { stdin } = process;\nif (args.interactive && typeof stdin.setRawMode === 'function') {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n    isInteractive = true;\n}\n\npackager.run(onReady, options, isInteractive);\n\nfunction onReady() {\n    log(chalk.green('Packager started!\\n'));\n    printServerInfo();\n}\n\n// print a nicely formatted message with setup information\nasync function printServerInfo() {\n    const settings = await ProjectSettings.readPackagerInfoAsync(process.cwd());\n    // who knows why qrcode-terminal takes a callback instead of just returning a string\n    const address = await UrlUtils.constructManifestUrlAsync(process.cwd());\n    qr.generate(address, qrCode => {\n        log(\n            `To view your app with live reloading, point the Expo app to this QR code.\nYou'll find the QR scanner on the Projects tab of the app.\n\n${indent(qrCode, 2)}\n\nOr enter this address in the Expo app's search bar:\n\n  ${chalk.underline(chalk.cyan(address))}\n\nYour phone will need to be on the same local network as this computer.\nFor links to install the Expo app, please visit ${chalk.underline(chalk.cyan('https://expo.io'))}.\n\nLogs from serving your app will appear here. Press Ctrl+C at any time to stop.`\n        );\n        printUsage();\n    });\n}\n\nfunction printUsage() {\n    if (!isInteractive) {\n        return;\n    }\n    const { dim, bold } = chalk;\n    const devMode = dev ? 'development' : 'production';\n    const iosInfo = process.platform === 'win32'\n        ? dim('.')\n        : `${dim(`, or`)} i ${dim(`to open iOS emulator.`)}`;\n    log(\n        `\n ${dim(`\\u203A Press`)} a ${dim(`to open Android device or emulator`)}${iosInfo}\n ${dim(`\\u203A Press`)} q ${dim(`to display QR code.`)}\n ${dim(`\\u203A Press`)} r ${dim(`to restart packager, or`)} R ${dim(`to restart packager and clear cache.`)}\n ${dim(`\\u203A Press`)} d ${dim(`to toggle development mode. (current mode: ${bold(devMode)}${chalk.reset.dim(')')}`)}\n`\n    );\n}\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\n\nasync function handleKeypress(key) {\n    switch (key) {\n        case CTRL_C:\n        case CTRL_D:\n            process.emit('SIGINT');\n            return;\n        case 'a': {\n            clearConsole();\n            log.withTimestamp('Starting Android...');\n            const { success, error } = await Android.openProjectAsync(\n                process.cwd()\n            );\n            if (!success) {\n                log(chalk.red(error.message));\n            }\n            printUsage();\n            return;\n        }\n        case 'i': {\n            clearConsole();\n            log.withTimestamp('Starting iOS...');\n            const localAddress = await UrlUtils.constructManifestUrlAsync(\n                process.cwd(),\n                {\n                    hostType: 'localhost'\n                }\n            );\n            const {\n                success,\n                msg\n            } = await Simulator.openUrlInSimulatorSafeAsync(localAddress);\n            if (!success) {\n                log(chalk.red(msg));\n            }\n            printUsage();\n            return;\n        }\n        case 'q':\n            clearConsole();\n            await printServerInfo();\n            return;\n        case 'r':\n        case 'R': {\n            clearConsole();\n            const reset = key === 'R';\n            if (reset) {\n                log.withTimestamp('Asking packager to reset its cache...');\n            }\n            log.withTimestamp('Restarting packager...');\n            Project.startAsync(process.cwd(), { reset });\n            return;\n        }\n        case 'd':\n            clearConsole();\n            dev = !dev;\n            await ProjectSettings.setAsync(process.cwd(), { dev });\n            log(\n                `Packager now running in ${chalk.bold(dev ? 'development' : 'production')}${chalk.reset(` mode.`)}\n\nPlease close and reopen the project in the Expo app for the\nchange to take effect.`\n            );\n            printUsage();\n            return;\n    }\n}\n"]}