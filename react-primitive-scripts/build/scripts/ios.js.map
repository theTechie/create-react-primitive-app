{"version":3,"sources":["ios.js"],"names":["constructManifestUrlAsync","process","cwd","address","hostType","localAddress","withTimestamp","openUrlInSimulatorSafeAsync","success","msg","generate","green","qrCode","underline","cyan","red","exit","startSimulatorAndPrintInfo","validation","reactNativeVersionWarnings","developerTool","offline","command","sync","join","isPlatformSupported","yellow","run"],"mappings":";;;;;;;;;;AAqCA;;wFACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC0B,cAASA,yBAAT,CAAmCC,QAAQC,GAAR,EAAnC,CAD1B;;AAAA;AACUC,+BADV;AAAA;AAAA,+BAE+B,cAASH,yBAAT,CACvBC,QAAQC,GAAR,EADuB,EAEvB;AACIE,sCAAU;AADd,yBAFuB,CAF/B;;AAAA;AAEUC,oCAFV;;;AASI,sCAAIC,aAAJ,CAAkB,uBAAlB;AATJ;AAAA,+BAUmC,eAAUC,2BAAV,CAC3BF,YAD2B,CAVnC;;AAAA;AAAA;AAUYG,+BAVZ,SAUYA,OAVZ;AAUqBC,2BAVrB,SAUqBA,GAVrB;;;AAcI,4BAAID,OAAJ,EAAa;AACT,qDAAGE,QAAH,CAAYP,OAAZ,EAAqB,kBAAU;AAC3B,8CAAIG,aAAJ,MAAqB,gBAAMK,KAAN,CAAY,mBAAZ,CAArB;AACA,oMAKV,4BAAOC,MAAP,EAAe,CAAf,CALU,sEASR,gBAAMC,SAAN,CAAgB,gBAAMC,IAAN,CAAWX,OAAX,CAAhB,CATQ,oIAYsC,gBAAMU,SAAN,CAAgB,gBAAMC,IAAN,CAAW,iBAAX,CAAhB,CAZtC;AAmBH,6BArBD;AAsBH,yBAvBD,MAuBO;AACH,0CAAIR,aAAJ,CACO,gBAAMS,GAAN,CAAU,4BAAV,CADP,YAGNN,GAHM,YAKN,gBAAMM,GAAN,CAAU,YAAV,CALM;AAOAd,oCAAQe,IAAR,CAAa,CAAb;AACH;;AA9CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,0B;;;;;AApCf;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,YAAOC,UAAP,CAAkBC,0BAAlB,GAA+C,KAA/C;AACA,YAAOC,aAAP,GAAuB,MAAvB;AACA,YAAOC,OAAP,GAAiB,IAAjB;;AAEA,IAAMC,UAAkB,qBAAWC,IAAX,CAAgB,eAAKC,IAAL,CAAUvB,QAAQC,GAAR,EAAV,EAAyB,WAAzB,CAAhB,IAClB,SADkB,GAElB,KAFN;;AAIA,IAAI,CAAC,eAAUuB,mBAAV,EAAL,EAAsC;AAClC,uBACI,gBAAMV,GAAN,CACI,0FADJ,CADJ;AAKA,uBACI,gBAAMW,MAAN,kBACoB,gBAAMZ,IAAN,CAAWQ,UAAU,QAArB,CADpB,0DADJ;AAKArB,YAAQe,IAAR,CAAa,CAAb;AACH;;AAED,mBAASW,GAAT,CAAaV,0BAAb","file":"ios.js","sourcesContent":["// @flow\n\nimport { Config, ProjectSettings, Simulator, UrlUtils } from 'xdl';\n\nimport chalk from 'chalk';\nimport indent from 'indent-string';\nimport path from 'path';\nimport pathExists from 'path-exists';\nimport qr from 'qrcode-terminal';\nimport log from '../util/log';\n\nimport packager from '../util/packager';\n\nConfig.validation.reactNativeVersionWarnings = false;\nConfig.developerTool = 'crna';\nConfig.offline = true;\n\nconst command: string = pathExists.sync(path.join(process.cwd(), 'yarn.lock'))\n    ? 'yarnpkg'\n    : 'npm';\n\nif (!Simulator.isPlatformSupported()) {\n    log(\n        chalk.red(\n            '\\nThis command only works on macOS computers with Xcode and the iOS simulator installed.'\n        )\n    );\n    log(\n        chalk.yellow(\n            `If you run \\`${chalk.cyan(command + ' start')}\\` then you can view your app on a physical device.\\n`\n        )\n    );\n    process.exit(1);\n}\n\npackager.run(startSimulatorAndPrintInfo);\n\n// print a nicely formatted message with setup information\nasync function startSimulatorAndPrintInfo() {\n    const address = await UrlUtils.constructManifestUrlAsync(process.cwd());\n    const localAddress = await UrlUtils.constructManifestUrlAsync(\n        process.cwd(),\n        {\n            hostType: 'localhost'\n        }\n    );\n\n    log.withTimestamp('Starting simulator...');\n    const { success, msg } = await Simulator.openUrlInSimulatorSafeAsync(\n        localAddress\n    );\n\n    if (success) {\n        qr.generate(address, qrCode => {\n            log.withTimestamp(`${chalk.green('Packager started!')}`);\n            log(\n                `\nTo view your app with live reloading, point the Expo app to this QR code.\nYou'll find the QR scanner on the Projects tab of the app.\n\n${indent(qrCode, 2)}\n\nOr enter this address in the Expo app's search bar:\n\n  ${chalk.underline(chalk.cyan(address))}\n\nYour phone will need to be on the same local network as this computer.\nFor links to install the Expo app, please visit ${chalk.underline(chalk.cyan('https://expo.io'))}.\n\nLogs from serving your app will appear here. Press Ctrl+C at any time to stop.\n\nIf you restart the simulator or change the simulated hardware, you may need to restart this process.\n`\n            );\n        });\n    } else {\n        log.withTimestamp(\n            `${chalk.red('Failed to start simulator:')}\n\n${msg}\n\n${chalk.red('Exiting...')}`\n        );\n        process.exit(0);\n    }\n}\n"]}