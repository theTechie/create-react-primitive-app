{"version":3,"sources":["packager.js"],"names":["projectDir","race","stopAsync","resolve","reject","setTimeout","result","readPackagerInfoAsync","packagerPid","process","kill","exit","cleanUpPackager","installExitHooks","isInteractive","platform","require","createInterface","input","stdin","output","stdout","on","emit","withTimestamp","then","green","shouldIgnoreMsg","msg","indexOf","run","onReady","options","packagerReady","needsClear","logBuffer","progressBar","cwd","watchmanExists","sync","status","watcherDetails","toString","parseInt","split","trim","red","cyan","handleLogChunk","chunk","devEnabled","includes","deviceName","message","level","INFO","WARN","yellow","ERROR","packagerLogsStream","projectRoot","onStartBuildBundle","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","ticks","percent","curr","tick","onFinishBuildBundle","err","startTime","endTime","duration","updateLogs","newLogChunks","updater","forEach","map","attachLoggerStream","stream","write","tag","type","startAsync","reason","stack"],"mappings":"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","file":"packager.js","sourcesContent":["// @flow\n\nimport {\n    PackagerLogsStream,\n    Project,\n    ProjectSettings,\n    ProjectUtils\n} from 'xdl';\n\nimport spawn from 'cross-spawn';\nimport ProgressBar from 'progress';\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\n\nimport log from './log';\n\nfunction installExitHooks(projectDir, isInteractive) {\n    if (!isInteractive && process.platform === 'win32') {\n        require('readline')\n            .createInterface({\n                input: process.stdin,\n                output: process.stdout\n            })\n            .on('SIGINT', () => {\n                process.emit('SIGINT');\n            });\n    }\n\n    process.on('SIGINT', () => {\n        log.withTimestamp('Stopping packager...');\n        cleanUpPackager(projectDir).then(() => {\n            // TODO: this shows up after process exits, fix it\n            log.withTimestamp(chalk.green('Packager stopped.'));\n            process.exit();\n        });\n    });\n}\n\nasync function cleanUpPackager(projectDir) {\n    const result = await Promise.race([\n        Project.stopAsync(projectDir),\n        new Promise((resolve, reject) =>\n            setTimeout(resolve, 1000, 'stopFailed'))\n    ]);\n\n    if (result === 'stopFailed') {\n        // find RN packager pid, attempt to kill manually\n        try {\n            const { packagerPid } = await ProjectSettings.readPackagerInfoAsync(\n                projectDir\n            );\n            process.kill(packagerPid);\n        } catch (e) {\n            process.exit(1);\n        }\n    }\n}\n\nfunction shouldIgnoreMsg(msg) {\n    return msg.indexOf('Duplicate module name: bser') >= 0 ||\n        msg.indexOf('Duplicate module name: fb-watchman') >= 0 ||\n        msg.indexOf('Warning: React.createClass is no longer supported') >= 0 ||\n        msg.indexOf(\n            'Warning: PropTypes has been moved to a separate package'\n        ) >= 0;\n}\n\nfunction run(onReady: () => ?any, options: Object = {}, isInteractive = false) {\n    let packagerReady = false;\n    let needsClear = false;\n    let logBuffer = '';\n    let progressBar;\n    const projectDir = process.cwd();\n\n    if (process.platform !== 'win32') {\n        const watchmanExists = spawn.sync('which', ['watchman']).status === 0;\n\n        if (process.platform === 'darwin' && !watchmanExists) {\n            const watcherDetails = spawn\n                .sync('sysctl', ['kern.maxfiles'])\n                .stdout.toString();\n            if (parseInt(watcherDetails.split(':')[1].trim()) < 5242880) {\n                log.withTimestamp(\n                    `${chalk.red(`Unable to start server`)}\nSee https://git.io/v5vcn for more information, either install watchman or run the following snippet:\n${chalk.cyan(`  sudo sysctl -w kern.maxfiles=5242880\n  sudo sysctl -w kern.maxfilesperproc=524288`)}\n        `\n                );\n                process.exit(1);\n            }\n        } else if (!watchmanExists) {\n            const watcherDetails = spawn\n                .sync('sysctl', ['fs.inotify.max_user_watches'])\n                .stdout.toString();\n            if (parseInt(watcherDetails.split('=')[1].trim()) < 12288) {\n                log.withTimestamp(\n                    `${chalk.red(`Unable to start server`)}\nSee https://git.io/v5vcn for more information, either install watchman or run the following snippet:\n${chalk.cyan(`  sudo sysctl -w fs.inotify.max_user_instances=1024\n  sudo sysctl -w fs.inotify.max_user_watches=12288`)}`\n                );\n                process.exit(1);\n            }\n        }\n    }\n\n    const handleLogChunk = chunk => {\n        // pig, meet lipstick\n        // 1. https://github.com/facebook/react-native/issues/14620\n        // 2. https://github.com/facebook/react-native/issues/14610\n        // 3. https://github.com/react-community/create-react-primitive-app/issues/229#issuecomment-308654303\n        // @ide is investigating 3), the first two are upstream issues that will\n        // likely be resolved by others\n        if (shouldIgnoreMsg(chunk.msg)) {\n            return;\n        }\n\n        // we don't need to print the entire manifest when loading the app\n        if (chunk.msg.indexOf(' with appParams: ') >= 0) {\n            if (needsClear) {\n                // this is set when we previously encountered an error\n                // TODO clearConsole();\n            }\n            let devEnabled = chunk.msg.includes('__DEV__ === true');\n            log.withTimestamp(\n                `Running app on ${chunk.deviceName} in ${devEnabled ? 'development' : 'production'} mode\\n`\n            );\n            return;\n        }\n\n        if (chunk.msg === 'Dependency graph loaded.') {\n            packagerReady = true;\n            onReady();\n            return;\n        }\n\n        if (packagerReady) {\n            const message = `${chunk.msg.trim()}\\n`;\n            if (chunk.level <= bunyan.INFO) {\n                log.withTimestamp(message);\n            } else if (chunk.level === bunyan.WARN) {\n                log.withTimestamp(chalk.yellow(message));\n            } else {\n                log.withTimestamp(chalk.red(message));\n\n                // if you run into a syntax error then we should clear log output on reload\n                needsClear = message.indexOf('SyntaxError') >= 0;\n            }\n        } else {\n            if (chunk.level >= bunyan.ERROR) {\n                log(chalk.yellow('***ERROR STARTING PACKAGER***'));\n                log(logBuffer);\n                log(chalk.red(chunk.msg));\n                logBuffer = '';\n            } else {\n                logBuffer += chunk.msg + '\\n';\n            }\n        }\n    };\n\n    // Subscribe to packager/server logs\n    let packagerLogsStream = new PackagerLogsStream({\n        projectRoot: projectDir,\n        onStartBuildBundle: () => {\n            progressBar = new ProgressBar(\n                'Building JavaScript bundle [:bar] :percent',\n                {\n                    total: 100,\n                    clear: true,\n                    complete: '=',\n                    incomplete: ' '\n                }\n            );\n\n            log.setBundleProgressBar(progressBar);\n        },\n        onProgressBuildBundle: percent => {\n            if (!progressBar || progressBar.complete) return;\n            let ticks = percent - progressBar.curr;\n            ticks > 0 && progressBar.tick(ticks);\n        },\n        onFinishBuildBundle: (err, startTime, endTime) => {\n            if (progressBar && !progressBar.complete) {\n                progressBar.tick(100 - progressBar.curr);\n            }\n\n            if (progressBar) {\n                log.setBundleProgressBar(null);\n                progressBar = null;\n\n                if (err) {\n                    log.withTimestamp(\n                        chalk.red(`Failed building JavaScript bundle`)\n                    );\n                } else {\n                    let duration = endTime - startTime;\n                    log.withTimestamp(\n                        chalk.green(\n                            `Finished building JavaScript bundle in ${duration}ms`\n                        )\n                    );\n                }\n            }\n        },\n        updateLogs: updater => {\n            let newLogChunks = updater([]);\n\n            if (progressBar) {\n                // Restarting watchman causes `onFinishBuildBundle` to not fire. Until\n                // this is handled upstream in xdl, reset progress bar with error here.\n                newLogChunks.forEach(chunk => {\n                    if (chunk.msg === 'Restarted watchman.') {\n                        progressBar.tick(100 - progressBar.curr);\n                        log.setBundleProgressBar(null);\n                        progressBar = null;\n                        log.withTimestamp(\n                            chalk.red('Failed building JavaScript bundle')\n                        );\n                    }\n                });\n            }\n\n            newLogChunks.map(handleLogChunk);\n        }\n    });\n\n    // Subscribe to device updates separately from packager/server updates\n    ProjectUtils.attachLoggerStream(projectDir, {\n        stream: {\n            write: chunk => {\n                if (chunk.tag === 'device') {\n                    handleLogChunk(chunk);\n                }\n            }\n        },\n        type: 'raw'\n    });\n\n    installExitHooks(projectDir, isInteractive);\n    log.withTimestamp('Starting packager...');\n\n    Project.startAsync(projectDir, options).then(\n        () => {},\n        reason => {\n            log.withTimestamp(\n                chalk.red(`Error starting packager: ${reason.stack}`)\n            );\n            process.exit(1);\n        }\n    );\n}\n\nexport default { run };\n"]}