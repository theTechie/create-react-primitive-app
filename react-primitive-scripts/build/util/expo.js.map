{"version":3,"sources":["expo.js"],"names":["loginOrRegister","user","appJsonPath","join","process","cwd","JSON","readFile","appJson","parse","expo","ios","bundleIdentifier","platform","console","log","cyan","prompt","name","message","iosBundleIdentifier","android","package","androidPackage","writeFile","detachAsync","stdin","pause","resolve","toString","pkgJson","entryPoint","main","devDependencies","scripts","start","build","eject","versionsAsync","versions","sdkTag","sdkVersions","sdkVersion","expoReactNativeTag","dependencies","green","detach","yellow","getCurrentUserAsync","currentUser","loggedInQuestions","type","nickname","choices","value","stayLoggedIn","logoutAsync","questions","action","githubAuthAsync","registerAsync","usernamePasswordAuthAsync","loginAsync","Error","validate","validator","answers","data","username","password","val","trim","registeredUser","AUTH_CLIENT_ID","initialize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;wFAcO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgBA,iBADhB;;AAAA;AACGC,4BADH;AAGGC,mCAHH,GAGiB,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,UAAzB,CAHjB;AAAA,sCAIaC,IAJb;AAAA;AAAA,+BAI8B,kBAAIC,QAAJ,CAAaL,WAAb,CAJ9B;;AAAA;AAAA;AAIGM,+BAJH,eAIkBC,KAJlB;;AAAA,8BAOC,CAAC,CAACD,QAAQE,IAAR,CAAaC,GAAd,IAAqB,CAACH,QAAQE,IAAR,CAAaC,GAAb,CAAiBC,gBAAxC,KACAR,QAAQS,QAAR,KAAqB,QARtB;AAAA;AAAA;AAAA;;AAUCC,gCAAQC,GAAR,wLAIJ,gBAAMC,IAAN,CAAW,kGAAX,CAJI;AAVD;AAAA,+BAiBuC,mBAASC,MAAT,CAAgB,CAClD;AACIC,kCAAM,qBADV;AAEIC,qCAAS;AAFb,yBADkD,CAAhB,CAjBvC;;AAAA;AAAA;AAiBSC,2CAjBT,SAiBSA,mBAjBT;;;AAwBCZ,gCAAQE,IAAR,CAAaC,GAAb,GAAmBH,QAAQE,IAAR,CAAaC,GAAb,IAAoB,EAAvC;AACAH,gCAAQE,IAAR,CAAaC,GAAb,CAAiBC,gBAAjB,GAAoCQ,mBAApC;;AAzBD;AAAA,8BA6BC,CAACZ,QAAQE,IAAR,CAAaW,OAAd,IAAyB,CAACb,QAAQE,IAAR,CAAaW,OAAb,CAAqBC,OA7BhD;AAAA;AAAA;AAAA;;AA8BCR,gCAAQC,GAAR,wLAIJ,gBAAMC,IAAN,CAAW,6EAAX,CAJI;;AA9BD;AAAA,+BAsCkC,mBAASC,MAAT,CAAgB,CAC7C;AACIC,kCAAM,gBADV;AAEIC,qCAAS;AAFb,yBAD6C,CAAhB,CAtClC;;AAAA;AAAA;AAsCSI,sCAtCT,SAsCSA,cAtCT;;;AA6CCf,gCAAQE,IAAR,CAAaW,OAAb,GAAuBb,QAAQE,IAAR,CAAaW,OAAb,IAAwB,EAA/C;AACAb,gCAAQE,IAAR,CAAaW,OAAb,CAAqBC,OAArB,GAA+BC,cAA/B;;AA9CD;AAAA;AAAA,+BAkDG,kBAAIC,SAAJ,CAActB,WAAd,EAA2B,yBAAeM,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAA3B,CAlDH;;AAAA;AAAA;AAAA,+BAoDG,YAAOiB,WAAP,CAAmBrB,QAAQC,GAAR,EAAnB,CApDH;;AAAA;AAqDH;AACAD,gCAAQsB,KAAR,CAAcC,KAAd;;AAtDG,sCAwDarB,IAxDb;AAAA;AAAA,+BAyDQ,kBAAIC,QAAJ,CAAa,eAAKqB,OAAL,CAAa,cAAb,CAAb,CAzDR;;AAAA;AAAA,oDAyDoDC,QAzDpD;AAwDGC,+BAxDH,eAwDkBrB,KAxDlB;AA4DGsB,kCA5DH;AAAA;AAAA,+BAiEG,kBAAIP,SAAJ,CAAc,UAAd,EAA0BO,UAA1B,CAjEH;;AAAA;AAkEHD,gCAAQE,IAAR,GAAe,UAAf;;AAEA,+BAAOF,QAAQG,eAAR,CAAwB,yBAAxB,CAAP;AACA,+BAAOH,QAAQI,OAAR,CAAgBC,KAAvB;AACA,+BAAOL,QAAQI,OAAR,CAAgBE,KAAvB;AACA,+BAAON,QAAQI,OAAR,CAAgBG,KAAvB;AACA,+BAAOP,QAAQI,OAAR,CAAgBb,OAAvB;AACA,+BAAOS,QAAQI,OAAR,CAAgBvB,GAAvB;;AAzEG;AAAA,+BA2EoB,cAAS2B,aAAT,EA3EpB;;AAAA;AA2EGC,gCA3EH;AA4EGC,8BA5EH,GA4EYD,SAASE,WAAT,CACXjC,QAAQE,IAAR,CAAagC,UADF,EAEbC,kBA9EC;;;AAgFHb,gCAAQc,YAAR,CACI,cADJ,sDAEoDJ,MAFpD;;AAhFG;AAAA,+BAoFG,kBAAIhB,SAAJ,CAAc,cAAd,EAA8B,yBAAeM,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAA9B,CApFH;;AAAA;;AAsFHhB,gCAAQC,GAAR,CACO,gBAAM8B,KAAN,CAAY,8BAAZ,CADP,oEAIA,gBAAM7B,IAAN,CAAW,qEAAX,CAJA,qFAOA,gBAAMA,IAAN,CAAW,0DAAX,CAPA;;AAtFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe8B,M;;;;;;yFAkGtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACIhC,gCAAQC,GAAR,CAAY,gBAAMgC,MAAN,CAAa,6CAAb,CAAZ;AADJ;AAAA,+BAE8B,UAAYC,mBAAZ,EAF9B;;AAAA;AAEUC,mCAFV;;AAAA,6BAIQA,WAJR;AAAA;AAAA;AAAA;;AAKcC,yCALd,GAKkC,CACtB;AACIC,kCAAM,MADV;AAEIjC,kCAAM,cAFV;AAGIC,0FACd,gBAAM0B,KAAN,CAAYI,YAAYG,QAAxB,CADc,oDAHJ;AAKIC,qCAAS,CACL;AACInC,4DAA0B+B,YAAYG,QAAtC,MADJ;AAEIE,uCAAO;AAFX,6BADK,EAKL;AACIpC,sCAAM,sCADV;AAEIoC,uCAAO;AAFX,6BALK;AALb,yBADsB,CALlC;AAAA;AAAA,+BAwBuC,mBAASrC,MAAT,CAAgBiC,iBAAhB,CAxBvC;;AAAA;AAAA;AAwBgBK,oCAxBhB,SAwBgBA,YAxBhB;;AAAA,6BA0BYA,YA1BZ;AAAA;AAAA;AAAA;;AAAA,0DA2BmBN,WA3BnB;;AAAA;AAAA;AAAA,+BA6BkB,UAAYO,WAAZ,EA7BlB;;AAAA;AA8BY1C,gCAAQC,GAAR,CAAY,gBAAM8B,KAAN,CAAY,8BAAZ,CAAZ;;AA9BZ;AAkCUY,iCAlCV,GAkCsB,CACd;AACIN,kCAAM,MADV;AAEIjC,kCAAM,QAFV;AAGIC,qCAAS,qCAHb;AAIIkC,qCAAS,CACL;AACInC,sCAAM,yBADV;AAEIoC,uCAAO;AAFX,6BADK,EAKL;AACIpC,sCAAM,sCADV;AAEIoC,uCAAO;AAFX,6BALK,EASL;AACIpC,sCAAM,QADV;AAEIoC,uCAAO;AAFX,6BATK;AAJb,yBADc,CAlCtB;AAAA;AAAA,+BAwD6B,mBAASrC,MAAT,CAAgBwC,SAAhB,CAxD7B;;AAAA;AAAA;AAwDYC,8BAxDZ,SAwDYA,MAxDZ;;AAAA,8BA0DQA,WAAW,QA1DnB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA2DqBC,iBA3DrB;;AAAA;AAAA;;AAAA;AAAA,8BA4DeD,WAAW,UA5D1B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA6DqBE,eA7DrB;;AAAA;AAAA;;AAAA;AAAA,8BA8DeF,WAAW,cA9D1B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA+DqBG,2BA/DrB;;AAAA;AAAA;;AAAA;AAAA,0DAiEe,IAjEf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe7D,e;;;;;;yFAqEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqB,UAAY8D,UAAZ,CAAuB,QAAvB,CADrB;;AAAA;AACQ7D,4BADR;;AAAA,6BAEQA,IAFR;AAAA;AAAA;AAAA;;AAGQa,gCAAQC,GAAR,CACI,gBAAM8B,KAAN,kCACmC5C,KAAKmD,QADxC,mBADJ;AAHR,0DAQenD,IARf;;AAAA;AAAA,8BAUc,IAAI8D,KAAJ,CAAU,iDAAV,CAVd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeJ,e;;;;;;yFAqBf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUF,iCADV,GACsB,CACd;AACIN,kCAAM,OADV;AAEIjC,kCAAM,UAFV;AAGIC,qCAAS,yBAHb;AAII6C,sCAAUC;AAJd,yBADc,EAOd;AACId,kCAAM,UADV;AAEIjC,kCAAM,UAFV;AAGIC,qCAAS,WAHb;AAII6C,sCAAUC;AAJd,yBAPc,CADtB;AAAA;AAAA,+BAgB0B,mBAAShD,MAAT,CAAgBwC,SAAhB,CAhB1B;;AAAA;AAgBUS,+BAhBV;AAkBUC,4BAlBV,GAkBiB;AACTC,sCAAUF,QAAQE,QADT;AAETC,sCAAUH,QAAQG;AAFT,yBAlBjB;AAAA;AAAA,+BAuBqB,UAAYP,UAAZ,CAAuB,WAAvB,EAAoCK,IAApC,CAvBrB;;AAAA;AAuBQlE,4BAvBR;;AAAA,6BAyBQA,IAzBR;AAAA;AAAA;AAAA;;AA0BQa,gCAAQC,GAAR,CACI,gBAAM8B,KAAN,kCAA2C5C,KAAKmD,QAAhD,OADJ;AA1BR,0DA6BenD,IA7Bf;;AAAA;AAAA,8BA+Bc,IAAI8D,KAAJ,CAAU,sDAAV,CA/Bd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeF,yB;;;;;;yFAmCf;AAAA;AAAA;AAAA;AAAA;AAAA;AACI/C,gCAAQC,GAAR;;AAOM0C,iCARV,GAQsB,CACd;AACIN,kCAAM,OADV;AAEIjC,kCAAM,WAFV;AAGIC,qCAAS,qBAHb;AAII6C,sCAAUC;AAJd,yBADc,EAOd;AACId,kCAAM,OADV;AAEIjC,kCAAM,YAFV;AAGIC,qCAAS,qBAHb;AAII6C,sCAAUC;AAJd,yBAPc,EAad;AACId,kCAAM,OADV;AAEIjC,kCAAM,UAFV;AAGIC,qCAAS,WAHb;AAII6C,sCAAUC;AAJd,yBAbc,EAmBd;AACId,kCAAM,OADV;AAEIjC,kCAAM,OAFV;AAGIC,qCAAS,gBAHb;AAII6C,sCAAUC;AAJd,yBAnBc,EAyBd;AACId,kCAAM,UADV;AAEIjC,kCAAM,UAFV;AAGIC,qCAAS,WAHb;AAII6C,sCAAUC;AAJd,yBAzBc,EA+Bd;AACId,kCAAM,UADV;AAEIjC,kCAAM,gBAFV;AAGIC,qCAAS,kBAHb;AAII6C,oCAJJ,oBAIaM,GAJb,EAIkBJ,OAJlB,EAI2B;AACnB,oCAAII,IAAIC,IAAJ,OAAe,EAAnB,EAAuB;AACnB,2CAAO,KAAP;AACH;AACD,oCAAID,IAAIC,IAAJ,OAAeL,QAAQG,QAAR,CAAiBE,IAAjB,EAAnB,EAA4C;AACxC;AACH;AACD,uCAAO,IAAP;AACH;AAZL,yBA/Bc,CARtB;AAAA;AAAA,+BAuD0B,mBAAStD,MAAT,CAAgBwC,SAAhB,CAvD1B;;AAAA;AAuDUS,+BAvDV;AAAA;AAAA,+BAyDiC,UAAYN,aAAZ,4BACtBM,OADsB,EAzDjC;;AAAA;AAyDUM,sCAzDV;;;AA6DI1D,gCAAQC,GAAR,CAAY,gBAAM8B,KAAN,CAAY,4BAAZ,CAAZ;;AA7DJ,0DA+DW2B,cA/DX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeZ,a;;;;;AA3Of;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAIA,IAAMa,iBAAiB,kCAAvB;;AACA,UAAYC,UAAZ,CAAuBD,cAAvB;;AAuLA,SAASR,SAAT,CAAmBK,GAAnB,EAAyC;AACrC,QAAIA,IAAIC,IAAJ,OAAe,EAAnB,EAAuB;AACnB,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH","file":"expo.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport path from 'path';\n\nimport { Detach, User as UserManager, Versions } from 'xdl';\n\nimport type { User } from 'xdl/build/User';\n\nconst AUTH_CLIENT_ID = 'MGQh3rK3WZFWhJ91BShagHggMOhrE6nR';\nUserManager.initialize(AUTH_CLIENT_ID);\n\nexport async function detach() {\n    const user = await loginOrRegister();\n\n    const appJsonPath = path.join(process.cwd(), 'app.json');\n    const appJson = JSON.parse(await fse.readFile(appJsonPath));\n\n    if (\n        (!appJson.expo.ios || !appJson.expo.ios.bundleIdentifier) &&\n        process.platform === 'darwin'\n    ) {\n        console.log(\n            `\nYou'll need to specify an iOS bundle identifier. It must be unique on the App Store if you want to\npublish it there. See this StackOverflow question for more information:\n  ${chalk.cyan('https://stackoverflow.com/questions/11347470/what-does-bundle-identifier-mean-in-the-ios-project')}\n`\n        );\n        const { iosBundleIdentifier } = await inquirer.prompt([\n            {\n                name: 'iosBundleIdentifier',\n                message: 'What would you like your iOS bundle identifier to be?'\n            }\n        ]);\n\n        appJson.expo.ios = appJson.expo.ios || {};\n        appJson.expo.ios.bundleIdentifier = iosBundleIdentifier;\n    }\n\n    // check for android.package field, prompt interactively\n    if (!appJson.expo.android || !appJson.expo.android.package) {\n        console.log(\n            `\nYou'll need to specify an Android package name. It must be unique on the Play Store if you want to\npublish it there. See this StackOverflow question for more information:\n  ${chalk.cyan('https://stackoverflow.com/questions/6273892/android-package-name-convention')}\n`\n        );\n\n        const { androidPackage } = await inquirer.prompt([\n            {\n                name: 'androidPackage',\n                message: 'What would you like your Android package name to be?'\n            }\n        ]);\n\n        appJson.expo.android = appJson.expo.android || {};\n        appJson.expo.android.package = androidPackage;\n    }\n\n    // update app.json file with new contents\n    await fse.writeFile(appJsonPath, JSON.stringify(appJson, null, 2));\n\n    await Detach.detachAsync(process.cwd());\n    // yesno lib doesn't properly shut down. without this the command won't exit\n    process.stdin.pause();\n\n    const pkgJson = JSON.parse(\n        (await fse.readFile(path.resolve('package.json'))).toString()\n    );\n\n    const entryPoint = `import Expo from 'expo';\nimport App from './App';\n\nExpo.registerRootComponent(App);\n`;\n    await fse.writeFile('index.js', entryPoint);\n    pkgJson.main = 'index.js';\n\n    delete pkgJson.devDependencies['react-primitive-scripts'];\n    delete pkgJson.scripts.start;\n    delete pkgJson.scripts.build;\n    delete pkgJson.scripts.eject;\n    delete pkgJson.scripts.android;\n    delete pkgJson.scripts.ios;\n\n    const versions = await Versions.versionsAsync();\n    const sdkTag = versions.sdkVersions[\n        appJson.expo.sdkVersion\n    ].expoReactNativeTag;\n\n    pkgJson.dependencies[\n        'react-native'\n    ] = `https://github.com/expo/react-native/archive/${sdkTag}.tar.gz`;\n\n    await fse.writeFile('package.json', JSON.stringify(pkgJson, null, 2));\n\n    console.log(\n        `${chalk.green('Successfully set up ExpoKit!')}\n\nYou'll need to use Expo's XDE to run this project:\n  ${chalk.cyan('https://docs.expo.io/versions/latest/introduction/installation.html')}\n\nFor further instructions, please read ExpoKit's build documentation:\n  ${chalk.cyan('https://docs.expo.io/versions/latest/guides/expokit.html')}\n`\n    );\n}\n\nasync function loginOrRegister(): Promise<?User> {\n    console.log(chalk.yellow('\\nAn Expo account is required to proceed.\\n'));\n    const currentUser = await UserManager.getCurrentUserAsync();\n\n    if (currentUser) {\n        const loggedInQuestions = [\n            {\n                type: 'list',\n                name: 'stayLoggedIn',\n                message: `It appears you're already logged in to Expo as \\\n${chalk.green(currentUser.nickname)}, would you like to continue with this account?`,\n                choices: [\n                    {\n                        name: `Yes, continue as ${currentUser.nickname}.`,\n                        value: true\n                    },\n                    {\n                        name: \"No, I'd like to start a new session.\",\n                        value: false\n                    }\n                ]\n            }\n        ];\n\n        const { stayLoggedIn } = await inquirer.prompt(loggedInQuestions);\n\n        if (stayLoggedIn) {\n            return currentUser;\n        } else {\n            await UserManager.logoutAsync();\n            console.log(chalk.green('\\nSuccessfully logged out!\\n'));\n        }\n    }\n\n    const questions = [\n        {\n            type: 'list',\n            name: 'action',\n            message: 'How would you like to authenticate?',\n            choices: [\n                {\n                    name: 'Make a new Expo account',\n                    value: 'register'\n                },\n                {\n                    name: 'Log in with an existing Expo account',\n                    value: 'existingUser'\n                },\n                {\n                    name: 'Cancel',\n                    value: 'cancel'\n                }\n            ]\n        }\n    ];\n\n    const { action } = await inquirer.prompt(questions);\n\n    if (action === 'github') {\n        return await githubAuthAsync();\n    } else if (action === 'register') {\n        return await registerAsync();\n    } else if (action === 'existingUser') {\n        return await usernamePasswordAuthAsync();\n    } else {\n        return null;\n    }\n}\n\nasync function githubAuthAsync(): Promise<User> {\n    let user = await UserManager.loginAsync('github');\n    if (user) {\n        console.log(\n            chalk.green(\n                `\\nSuccessfully logged in as ${user.nickname} with GitHub!`\n            )\n        );\n        return user;\n    } else {\n        throw new Error('Unexpected Error: No user returned from the API');\n    }\n}\n\nfunction validator(val: string): boolean {\n    if (val.trim() === '') {\n        return false;\n    }\n    return true;\n}\n\nasync function usernamePasswordAuthAsync(): Promise<User> {\n    const questions = [\n        {\n            type: 'input',\n            name: 'username',\n            message: 'Username/Email Address:',\n            validate: validator\n        },\n        {\n            type: 'password',\n            name: 'password',\n            message: 'Password:',\n            validate: validator\n        }\n    ];\n\n    const answers = await inquirer.prompt(questions);\n\n    const data = {\n        username: answers.username,\n        password: answers.password\n    };\n\n    let user = await UserManager.loginAsync('user-pass', data);\n\n    if (user) {\n        console.log(\n            chalk.green(`\\nSuccessfully logged in as ${user.nickname}!`)\n        );\n        return user;\n    } else {\n        throw new Error('Unexpected Error: No user returned from the Expo API');\n    }\n}\n\nasync function registerAsync(): Promise<User> {\n    console.log(\n        `\nThanks for signing up for Expo!\nJust a few questions:\n`\n    );\n\n    const questions = [\n        {\n            type: 'input',\n            name: 'givenName',\n            message: 'First (Given) Name:',\n            validate: validator\n        },\n        {\n            type: 'input',\n            name: 'familyName',\n            message: 'Last (Family) Name:',\n            validate: validator\n        },\n        {\n            type: 'input',\n            name: 'username',\n            message: 'Username:',\n            validate: validator\n        },\n        {\n            type: 'input',\n            name: 'email',\n            message: 'Email Address:',\n            validate: validator\n        },\n        {\n            type: 'password',\n            name: 'password',\n            message: 'Password:',\n            validate: validator\n        },\n        {\n            type: 'password',\n            name: 'passwordRepeat',\n            message: 'Password Repeat:',\n            validate(val, answers) {\n                if (val.trim() === '') {\n                    return false;\n                }\n                if (val.trim() !== answers.password.trim()) {\n                    return `Passwords don't match!`;\n                }\n                return true;\n            }\n        }\n    ];\n\n    const answers = await inquirer.prompt(questions);\n\n    const registeredUser = await UserManager.registerAsync({\n        ...answers\n    });\n\n    console.log(chalk.green('\\nRegistration successful!'));\n\n    return registeredUser;\n}\n"]}